AWSTemplateFormatVersion: "2010-09-09"
Description: ""

Parameters:
  ProjectName:
    Description: "Project name"
    Type: "String"
  VpcId:
    Type: "String"
  SubnetIds:
    Type: "List<AWS::EC2::Subnet::Id>"

Resources:
  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${ProjectName}-elb-sg"
      GroupDescription: "Load balancer security group"
      VpcId: !Ref "VpcId"
      SecurityGroupIngress:
        - Description: "HTTP"
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - Description: "HTTPS"
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-elb-sg"
        - Key: "project-name"
          Value: !Ref "ProjectName"

  LoadBalancerHttpListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref "LoadBalancer"
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
       - Type: "redirect"
         RedirectConfig:
           Protocol: "HTTPS"
           Port: 443
           Host: "#{host}"
           Path: "/#{path}"
           Query: "#{query}"
           StatusCode: "HTTP_301"

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Ref "ProjectName"
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref "LoadBalancerSecurityGroup"
      Subnets: !Ref "SubnetIds"
      Type: "application"
      Tags:
        - Key: "project-name"
          Value: !Ref "ProjectName"

Outputs:
  ElbARN:
    Value: !Ref "LoadBalancer"
  ElbSecurityGroupId:
    Value: !Ref "LoadBalancerSecurityGroup"
