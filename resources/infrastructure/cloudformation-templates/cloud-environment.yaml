AWSTemplateFormatVersion: "2010-09-09"
Description: "Cloudformation template for setting up a new AWS project environment"

Parameters:
  TemplateBucketURL:
    Description: "URL of the bucket used for storing Cloudformation templates"
    Type: "String"
  ProjectName:
    Description: "Project name"
    Type: "String"
  Environment:
    Description: "Project name"
    Type: "String"
    AllowedValues:
      - "test"
      - "prod"
  DatabaseEngineVersion:
    Type: "String"
  RDSMonitoringRoleARN:
    Type: "String"
  VpcId:
    Type: "String"
  SubnetIds:
    Type: "List<AWS::EC2::Subnet::Id>"
  NotificationsEmail:
    Type: "String"
  EbServiceRoleARN:
    Type: "String"
  EbApplicationName:
    Type: "String"
  LoadBalancerARN:
    Type: "String"
  ElbSecurityGroupId:
    Type: "String"
  DatabaseUsername:
    Description: "Username for master user in RDS database"
    Type: "String"
    Default: "postgres"
  DatabasePassword:
    Description: "Password for master user in RDS database"
    Type: "String"
    NoEcho: true
  DatabasePort:
    Description: "Database port"
    Type: "String"
    Default: "5432"
  DatabaseName:
    Description: "Database name"
    Type: "String"
    Default: "ebdb"
  IncludeCognito:
    Type: "String"
    Default: "false"
  IncludeS3:
    Type: "String"
    Default: "false"
  IncludeRds:
    Type: "String"
    Default: "true"

Conditions:
  IncludeCognitoCond: !Equals ["true", !Ref "IncludeCognito"]
  IncludeS3Cond: !Equals ["true", !Ref "IncludeS3"]
  IncludeRDSCond: !Equals ["true", !Ref "IncludeRds"]

Resources:
  Cognito:
    Type: "AWS::CloudFormation::Stack"
    Condition: "IncludeCognitoCond"
    Properties:
      TemplateURL: !Sub "${TemplateBucketURL}/environment/cognito.yaml"
      Parameters:
        ProjectName: !Ref "ProjectName"
        Environment: !Ref "Environment"
        ConsumerRoleName: !GetAtt "IAM.Outputs.ConsumerRoleName"
  RDS:
    Type: "AWS::CloudFormation::Stack"
    Condition: "IncludeRDSCond"
    Properties:
      TemplateURL: !Sub "${TemplateBucketURL}/environment/rds.yaml"
      Parameters:
        ProjectName: !Ref "ProjectName"
        Environment: !Ref "Environment"
        DatabaseEngineVersion: !Ref "DatabaseEngineVersion"
        DatabaseUsername: !Ref "DatabaseUsername"
        DatabasePassword: !Ref "DatabasePassword"
        DatabasePort: !Ref "DatabasePort"
        DatabaseName: !Ref "DatabaseName"
        RDSMonitoringRoleARN: !Ref "RDSMonitoringRoleARN"
        VpcId: !Ref "VpcId"
        SubnetIds: !Join [",", !Ref "SubnetIds"]
  S3:
    Type: "AWS::CloudFormation::Stack"
    Condition: "IncludeS3Cond"
    Properties:
      TemplateURL: !Sub "${TemplateBucketURL}/environment/s3.yaml"
      Parameters:
        ProjectName: !Ref "ProjectName"
        Environment: !Ref "Environment"
        ConsumerRoleName: !GetAtt "IAM.Outputs.ConsumerRoleName"
  IAM:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${TemplateBucketURL}/environment/cloud-iam.yaml"
      Parameters:
        ProjectName: !Ref "ProjectName"
        Environment: !Ref "Environment"
  SSM:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${TemplateBucketURL}/environment/iam-ssm.yaml"
      Parameters:
        ProjectName: !Ref "ProjectName"
        Environment: !Ref "Environment"
        ConsumerRoleName: !GetAtt "IAM.Outputs.ConsumerRoleName"
  KMS:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${TemplateBucketURL}/environment/kms.yaml"
      Parameters:
        ProjectName: !Ref "ProjectName"
        Environment: !Ref "Environment"
        ConsumerRoleARN: !GetAtt "IAM.Outputs.ConsumerRoleARN"
  EB:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${TemplateBucketURL}/environment/eb.yaml"
      Parameters:
        ProjectName: !Ref "ProjectName"
        Environment: !Ref "Environment"
        VpcId: !Ref "VpcId"
        SubnetIds: !Join [",", !Ref "SubnetIds"]
        ServiceRoleARN: !Ref "EbServiceRoleARN"
        NotificationsEmail: !Ref "NotificationsEmail"
        LoadBalancerARN: !Ref "LoadBalancerARN"
        EbApplicationName: !Ref "EbApplicationName"
        ElbSecurityGroupId: !Ref "ElbSecurityGroupId"
        KmsKeyAlias: !GetAtt "KMS.Outputs.KmsKeyAlias"
        InstanceRoleName: !GetAtt "IAM.Outputs.ConsumerRoleName"
  RdsEbConnection:
    Type: "AWS::CloudFormation::Stack"
    Condition: "IncludeRDSCond"
    Properties:
      TemplateURL: !Sub "${TemplateBucketURL}/environment/eb-rds-connection.yaml"
      Parameters:
        ProjectName: !Ref "ProjectName"
        Environment: !Ref "Environment"
        RdsSecurityGroupId: !GetAtt "RDS.Outputs.RdsSecurityGroupId"
        EbSecurityGroupId: !GetAtt "EB.Outputs.EbSecurityGroupId"

Outputs:
  CognitoUserPoolId:
    Condition: "IncludeCognitoCond"
    Value: !GetAtt "Cognito.Outputs.UserPoolId"
  CognitoUserPoolURL:
    Condition: "IncludeCognitoCond"
    Value: !GetAtt "Cognito.Outputs.UserPoolURL"
  CognitoSPAClientId:
    Condition: "IncludeCognitoCond"
    Value: !GetAtt "Cognito.Outputs.UserPoolSPAClientId"
  KmsKeyAlias:
    Value: !GetAtt "KMS.Outputs.KmsKeyAlias"
  RdsAddress:
    Condition: "IncludeRDSCond"
    Value: !GetAtt "RDS.Outputs.RDSAddress"
  EbApplicationName:
    Value: !Ref "EbApplicationName"
  EbEnvironmentName:
    Value: !GetAtt "EB.Outputs.EbEnvironmentName"
  EbEnvironmentURL:
    Value: !GetAtt "EB.Outputs.EbEnvironmentURL"
  S3BucketName:
    Condition: "IncludeS3Cond"
    Value: !GetAtt "S3.Outputs.BucketName"
